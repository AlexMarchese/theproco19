#BlueJ class context
comment0.target=FabrikTest
comment0.text=\r\n\ Testklasse\ Fabriktest,\ um\ Fabrik\ und\ deren\ Methoden\ mit\ den\ davon\ abh\u00E4ngigen\ Klassen\ zu\ testen.\r\n\r\n\ @author\ \ GBI\ Gruppe\ 19\r\n\ @version\ 2.0\r\n
comment1.params=
comment1.target=FabrikTest()
comment1.text=\r\n\ Konstruktor\ von\ FabrikTest\r\n
comment10.params=
comment10.target=void\ testeErstelleProdukte()
comment10.text=\r\n\ Test\ der\ Methode\ "erstelleProdukte()".\ \r\n\ Der\ Test\ \u00FCberpr\u00FCft,\ ob\ erstens\ bei\ der\ Ausf\u00FChrung\ der\ Methode\ die\ Bestellungen\ in\ der\ Bestellungsliste\ korrekt\ erfasst\ werden,\ \r\n\ die\ Produkte\ erstellt\ werden\ und\ der\ richtige\ Text\ zur\u00FCckgegeben\ wird.\ Zweitens\ bei\ der\ Ausf\u00FChrung\ der\ Methode\ \r\n\ mit\ zuvor\ aufgegebenen\ Bestellungen\ gepr\u00FCft\ ob\ das\ System\ die\ Lagerkapazit\u00E4ten\ einh\u00E4lt\ und\ somit\ nur\ die\ produzierbaren\ Bestellungen\ best\u00E4tigt\ und\ der\ richtige\ Text\ zur\u00FCckgegeben\ wird,\r\n\ indem\ die\ R\u00FCckgabe\ mit\ der\ Vorgabe\ aus\ dem\ Test\ verglichen\ wird.\ \r\n\ \r\n
comment2.params=
comment2.target=void\ setUp()
comment2.text=\r\n\ Anweisungen\ vor\ jedem\ Testlauf.\r\n
comment3.params=
comment3.target=void\ tearDown()
comment3.text=\r\n\ Anweisungen\ nach\ jedem\ Testlauf.\r\n
comment4.params=
comment4.target=void\ testeFabrik()
comment4.text=\r\n\ \r\n\ Der\ Test\ \u00FCberpr\u00FCft,\ ob\ die\ Erstellung\ einer\ Fabrik\ funktioniert.\ \r\n\ Dies\ wird\ \u00FCberpr\u00FCft,\ indem\ eine\ neue\ Fabrik\ erstellt\ wird\ und\ die\ initialisierten\ Werte\r\n\ ("leere\ Liste"\ und\ "BestellungsNrCounter\ auf\ 1")\ \ mit\ der\ Vorgabe\ aus\ dem\ Test\ vergliechen\ werden.\ \r\n\ \ \r\n
comment5.params=
comment5.target=void\ testeSetters()
comment5.text=\r\n\ Test\ der\ Setter-Methoden.\ \r\n\ Der\ Test\ \u00FCberpr\u00FCft,\ ob\ die\ Methoden\ (1)\ BestellungsListe\ auf\ Null\ setzt\ \ 2)\ die\ BestellungsListe\ bef\u00FCllt\ wird)\ \r\n\ wie\ erwartet\ ausgef\u00FChrt\ wird,\ indem\ die\ R\u00FCckgabe\ mit\ der\ Vorgabe\ aus\ dem\ Test\ verglichen\ wird.\r\n\ \ \r\n
comment6.params=
comment6.target=void\ testeBestellungAufgeben()
comment6.text=\r\n\ \r\n\ Test\ der\ Methode\ "bestellungAufgeben()".\ \r\n\ Der\ Test\ \u00FCberpr\u00FCft,\ ob\ nach\ Ausf\u00FChrung\ der\ Mehtode\ die\ Liste\ korrekt\ bef\u00FCllt\ \ \r\n\ und\ der\ BestellungsNrCounter\ erh\u00F6ht\ wird,\ \r\n\ indem\ eine\ Fabrik\ erstellt\ wird\ und\ die\ Ausf\u00FChrung\ mit\ der\ Vorgabe\ aus\ dem\ Test\ verglichen\ wird.\ \r\n\ \r\n
comment7.params=
comment7.target=void\ testeBestellungAufgebenNegativeWerte()
comment7.text=\r\n\ \r\n\ Test\ der\ Methode\ "bestellungAufgebenNegativWerte()".\ \r\n\ Der\ Test\ \u00FCberpr\u00FCft,\ ob\ bei\ der\ Eingabe\ von\ Negativwerten\ der\ richtige\ Text\ zur\u00FCckgegeben\ wird,\r\n\ indem\ die\ R\u00FCckgabe\ mit\ der\ Vorgabe\ aus\ dem\ Test\ verglichen\ wird.\ \r\n\ \r\n
comment8.params=
comment8.target=void\ testeBestellungAufgebenZuVielAufEinmal()
comment8.text=\ \r\n\ Test\ der\ Methode\ "bestellungAufgebenZuVielAufEinmal()".\ \r\n\ Der\ Test\ \u00FCberpr\u00FCft,\ ob\ die\ Eingabe\ zu\ grossen\ Werten\ verhindert\ wird,\ indem\ versucht\ wird\ eine\ zu\ grosse\ Bestellung\ aufzugeben\ und\ pr\u00FCft\ ob\ dabei\ ein\ Fehler\ ausgegeben\ wird.\ \r\n\ \r\n
comment9.params=
comment9.target=void\ testeBestellungenAusgeben()
comment9.text=\r\n\ \r\n\ Test\ der\ Methode\ "bestellungAusgeben()".\ \r\n\ Der\ Test\ \u00FCberpr\u00FCft,\ ob\ erstens\ bei\ der\ Ausf\u00FChrung\ der\ Methode\ ohne\ aufgegebene\ Bestellung\ \r\n\ der\ richtige\ Text\ zur\u00FCckgegeben\ wird\ und\ zweitens\ bei\ der\ Ausf\u00FChrung\ der\ Methode\ \r\n\ mit\ zuvor\ aufgegebenen\ Bestellungen\ der\ richtige\ Text\ zur\u00FCckgegeben\ wird,\r\n\ indem\ die\ R\u00FCckgabe\ mit\ der\ Vorgabe\ aus\ dem\ Test\ verglichen\ wird.\ \r\n\ \r\n
numComments=11
